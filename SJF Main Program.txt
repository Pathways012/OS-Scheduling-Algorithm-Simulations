#include "process_class.cpp"
#include "iostream"
#include "string"

using namespace std;

void print_array(Process * process, int number)
{
	int i = 0;

	cout << "Process " << number << ": {";

	while (i < process->length)
	{
		if (process != NULL)
		{
			cout << process->array[i];
			cout << ", ";
			i++;
		}
	}
	cout << "}\n";
}
void print_queue(Queue * queue, string queue_name)
{
	int s = 0;
	Process * process;

	if (queue->front != NULL)
	{
		process = queue->front;
		cout << "Printing " << queue_name << ":\n";

		while (s < queue->size)	//process pointer = NULL after P2 is printed - moved P2 into both queues?
		{
			print_array(process, process->process_number);
			process = process->next;
			s++;
		}
	}
	else
	{
		cout << queue_name << " is empty.\n";
	}
	cout << endl;
}
int main()
{
	double current_time = 0;					//universal time for the simulation loop
	double CPU_time = 0;
	double average_turnaround_time = 0;
	double average_waiting_time = 0;
	double average_response_time = 0;
	int counter = 0;
	Process * temp_pointer;

	Queue * SJF_queue = new Queue();		//setup
	Queue * IO_queue = new Queue();
	Process * P1 = new Process(15);
	Process * P2 = new Process(17);
	Process * P3 = new Process(17);
	Process * P4 = new Process(17);
	Process * P5 = new Process(19);
	Process * P6 = new Process(17);
	Process * P7 = new Process(15);
	Process * P8 = new Process(11);

	P1->set_process_number(1);
	P1->add_value(5, 0);
	P1->add_value(27, 1);
	P1->add_value(3, 2);
	P1->add_value(31, 3);
	P1->add_value(5, 4);
	P1->add_value(43, 5);
	P1->add_value(4, 6);
	P1->add_value(18, 7);
	P1->add_value(6, 8);
	P1->add_value(22, 9);
	P1->add_value(4, 10);
	P1->add_value(26, 11);
	P1->add_value(3, 12);
	P1->add_value(24, 13);
	P1->add_value(4, 14);

	P2->set_process_number(2);
	P2->add_value(4, 0);
	P2->add_value(48, 1);
	P2->add_value(5, 2);
	P2->add_value(44, 3);
	P2->add_value(7, 4);
	P2->add_value(42, 5);
	P2->add_value(12, 6);
	P2->add_value(37, 7);
	P2->add_value(9, 8);
	P2->add_value(76, 9);
	P2->add_value(4, 10);
	P2->add_value(41, 11);
	P2->add_value(9, 12);
	P2->add_value(31, 13);
	P2->add_value(7, 14);
	P2->add_value(43, 15);
	P2->add_value(8, 16);

	P3->set_process_number(3);
	P3->add_value(8, 0);
	P3->add_value(33, 1);
	P3->add_value(12, 2);
	P3->add_value(41, 3);
	P3->add_value(18, 4);
	P3->add_value(65, 5);
	P3->add_value(14, 6);
	P3->add_value(21, 7);
	P3->add_value(4, 8);
	P3->add_value(61, 9);
	P3->add_value(15, 10);
	P3->add_value(18, 11);
	P3->add_value(14, 12);
	P3->add_value(26, 13);
	P3->add_value(5, 14);
	P3->add_value(31, 15);
	P3->add_value(6, 16);

	P4->set_process_number(4);
	P4->add_value(3, 0);
	P4->add_value(35, 1);
	P4->add_value(4, 2);
	P4->add_value(41, 3);
	P4->add_value(5, 4);
	P4->add_value(45, 5);
	P4->add_value(3, 6);
	P4->add_value(51, 7);
	P4->add_value(4, 8);
	P4->add_value(61, 9);
	P4->add_value(5, 10);
	P4->add_value(54, 11);
	P4->add_value(6, 12);
	P4->add_value(82, 13);
	P4->add_value(5, 14);
	P4->add_value(77, 15);
	P4->add_value(3, 16);

	P5->set_process_number(5);
	P5->add_value(16, 0);
	P5->add_value(24, 1);
	P5->add_value(17, 2);
	P5->add_value(21, 3);
	P5->add_value(5, 4);
	P5->add_value(36, 5);
	P5->add_value(16, 6);
	P5->add_value(26, 7);
	P5->add_value(7, 8);
	P5->add_value(31, 9);
	P5->add_value(13, 10);
	P5->add_value(28, 11);
	P5->add_value(11, 12);
	P5->add_value(21, 13);
	P5->add_value(6, 14);
	P5->add_value(13, 15);
	P5->add_value(3, 16);
	P5->add_value(11, 17);
	P5->add_value(4, 18);

	P6->set_process_number(6);
	P6->add_value(11, 0);
	P6->add_value(22, 1);
	P6->add_value(4, 2);
	P6->add_value(8, 3);
	P6->add_value(5, 4);
	P6->add_value(10, 5);
	P6->add_value(6, 6);
	P6->add_value(12, 7);
	P6->add_value(7, 8);
	P6->add_value(14, 9);
	P6->add_value(9, 10);
	P6->add_value(18, 11);
	P6->add_value(12, 12);
	P6->add_value(24, 13);
	P6->add_value(15, 14);
	P6->add_value(30, 15);
	P6->add_value(8, 16);

	P7->set_process_number(7);
	P7->add_value(14, 0);
	P7->add_value(46, 1);
	P7->add_value(17, 2);
	P7->add_value(41, 3);
	P7->add_value(11, 4);
	P7->add_value(42, 5);
	P7->add_value(15, 6);
	P7->add_value(21, 7);
	P7->add_value(4, 8);
	P7->add_value(32, 9);
	P7->add_value(7, 10);
	P7->add_value(19, 11);
	P7->add_value(16, 12);
	P7->add_value(33, 13);
	P7->add_value(10, 14);

	P8->set_process_number(8);
	P8->add_value(4, 0);
	P8->add_value(14, 1);
	P8->add_value(5, 2);
	P8->add_value(33, 3);
	P8->add_value(6, 4);
	P8->add_value(51, 5);
	P8->add_value(14, 6);
	P8->add_value(73, 7);
	P8->add_value(16, 8);
	P8->add_value(87, 9);
	P8->add_value(6, 10);

	SJF_queue->push_back(P1);	//push all processes to the FCFS queue
	SJF_queue->push_back(P2);
	SJF_queue->push_back(P3);
	SJF_queue->push_back(P4);
	SJF_queue->push_back(P5);		
	SJF_queue->push_back(P6);
	SJF_queue->push_back(P7);
	SJF_queue->push_back(P8);	//end of setup

	cout << "\nDisplaying initial queue states... \n\n";
	print_queue(SJF_queue, "SJF");
	print_queue(IO_queue, "IO");

	/*for (counter = 0; counter < 587; counter++)	//SJF queue, P8
	{
		

			if (SJF_queue->size != 0)	//If the SJF queue is active
			{
				IO_queue->check_for_zeroes_in_IO_queue(IO_queue, SJF_queue);

				SJF_queue->check_for_complete_processes_in_SJF_queue(IO_queue, SJF_queue, current_time);
				SJF_queue->check_for_zeroes_in_SJF_queue(IO_queue, SJF_queue);

				if (SJF_queue->size > 1 && SJF_queue->front->running_flag == false)	//Put the shortest process at the front if there are no running processes
				{
					SJF_queue->sort_SJF_queue(SJF_queue);	//swapping front/back of the queue with 2 processes loses the former front's NEXT pointer
					SJF_queue->front->running_flag = true;	//set the currently running process' running_flag to true to avoid preemption
				}

				IO_queue->decrement_all(IO_queue);
				SJF_queue->decrement_front(SJF_queue);

				if (SJF_queue->front != NULL)
				{
					temp_pointer = SJF_queue->front->next;	//put the temporary pointer on the second item in the FCFS queue (waiting processes)
					while (temp_pointer != NULL)
					{
						temp_pointer->waiting_time++;		//increment the waiting processes' waiting time
						temp_pointer = temp_pointer->next;	//move to the next waiting process
					}

					temp_pointer = SJF_queue->front;		//put the temporary pointer at the front of the FCFS queue (running process)
					if (temp_pointer->response_time == 0)	//if the process hasn't begun running yet
					{
						temp_pointer->response_time = current_time;	//set the response time to the simulation's current time
					}
					
				}
				CPU_time++;
			}
			current_time++;
		
	}*///for loop brackets



	while (SJF_queue->size > 0 || IO_queue->size > 0)	
	{
		IO_queue->check_for_zeroes_in_IO_queue(IO_queue, SJF_queue);

			if (SJF_queue->size != 0)	//If the SJF queue is active
			{
				SJF_queue->check_for_complete_processes_in_SJF_queue(IO_queue, SJF_queue, current_time);
				SJF_queue->check_for_zeroes_in_SJF_queue(IO_queue, SJF_queue);

				if (SJF_queue->size == 1)					//if there is already a single running process, give it priority to avoid preemption by a new, shorter process
				{
					SJF_queue->front->running_flag = true;
				}
				if (SJF_queue->size > 1 && SJF_queue->front->running_flag == false)	//Put the shortest process at the front if there are no running processes
				{
					SJF_queue->sort_SJF_queue(SJF_queue);	//swapping front/back of the queue with 2 processes loses the former front's NEXT pointer
					SJF_queue->front->running_flag = true;	//set the currently running process' running_flag to true to avoid preemption
				}
				SJF_queue->decrement_front(SJF_queue);		

				if (SJF_queue->front != NULL)
				{
					temp_pointer = SJF_queue->front->next;	//put the temporary pointer on the second item in the FCFS queue (waiting processes)
					while (temp_pointer != NULL)
					{
						temp_pointer->waiting_time++;		//increment the waiting processes' waiting time
						temp_pointer = temp_pointer->next;	//move to the next waiting process
					}

					temp_pointer = SJF_queue->front;		//put the temporary pointer at the front of the SJF queue (running process)
					if (temp_pointer->response_time == 0)	//if the process hasn't begun running yet
					{
						temp_pointer->response_time = current_time;	//set the response time to the simulation's current time
					}
				}
				CPU_time++;
			}
			IO_queue->decrement_all(IO_queue);	//decrement the IO queue regardless of whether or not the SJF queue is running
			current_time++;
	}

	current_time--;		//undo the last current_time increment so current_time accurately reflects when the simulation finishes
	P4->response_time = 0;	//Fix P4's response time since it will run first

	//Output data once the simulation is finished running
	cout << "\nEnd of simulation.\n\n";
	cout << "Displaying final queue states...\n\n";
	print_queue(SJF_queue, "FCFS");
	print_queue(IO_queue, "IO");
	cout << "The current time is: " << current_time << endl;

	cout << "Process 1 turnaround time: " << P1->turnaround_time << endl;
	cout << "Process 1 waiting time: " << P1->waiting_time << endl;
	cout << "Process 1 response time: " << P1->response_time << endl << endl;

	cout << "Process 2 turnaround time: " << P2->turnaround_time << endl;
	cout << "Process 2 waiting time: " << P2->waiting_time << endl;
	cout << "Process 2 response time: " << P2->response_time << endl << endl;

	cout << "Process 3 turnaround time: " << P3->turnaround_time << endl;
	cout << "Process 3 waiting time: " << P3->waiting_time << endl;
	cout << "Process 3 response time: " << P3->response_time << endl << endl;

	cout << "Process 4 turnaround time: " << P4->turnaround_time << endl;
	cout << "Process 4 waiting time: " << P4->waiting_time << endl;
	cout << "Process 4 response time: " << P4->response_time << endl << endl;

	cout << "Process 5 turnaround time: " << P5->turnaround_time << endl;
	cout << "Process 5 waiting time: " << P5->waiting_time << endl;
	cout << "Process 5 response time: " << P5->response_time << endl << endl;

	cout << "Process 6 turnaround time: " << P6->turnaround_time << endl;
	cout << "Process 6 waiting time: " << P6->waiting_time << endl;
	cout << "Process 6 response time: " << P6->response_time << endl << endl;

	cout << "Process 7 turnaround time: " << P7->turnaround_time << endl;
	cout << "Process 7 waiting time: " << P7->waiting_time << endl;
	cout << "Process 7 response time: " << P7->response_time << endl << endl;

	cout << "Process 8 turnaround time: " << P8->turnaround_time << endl;
	cout << "Process 8 waiting time: " << P8->waiting_time << endl;
	cout << "Process 8 response time: " << P8->response_time << endl << endl;

	CPU_time = (CPU_time / current_time) * 100;
	average_turnaround_time = (P1->turnaround_time + P2->turnaround_time + P3->turnaround_time + P4->turnaround_time + P5->turnaround_time + P6->turnaround_time + P7->turnaround_time + P8->turnaround_time) / 8;
	average_waiting_time = (P1->waiting_time + P2->waiting_time + P3->waiting_time + P4->waiting_time + P5->waiting_time + P6->waiting_time + P7->waiting_time + P8->waiting_time) / 8;
	average_response_time = (P1->response_time + P2->response_time + P3->response_time + P4->response_time + P5->response_time + P6->response_time + P7->response_time + P8->response_time) / 8;

	cout << "CPU utilization for SJF: " << CPU_time << "%" << endl;
	cout << "Average turnaround time: " << average_turnaround_time << endl;
	cout << "Average waiting time: " << average_waiting_time << endl;
	cout << "Average response time: " << average_response_time << endl;

	return 0;
}
